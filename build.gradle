plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
	id 'org.sonarqube' version '5.0.0.4638'
}

group = 'com.covigator'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jar {
	enabled = false
}

def jacocoDir = layout.buildDirectory.dir("reports/")

def jacocoExcludePatterns = [
		// 측정에서 제외하는 패턴
		"**/*Application*",
		"**/config/*",
		"**/exception/*",
		"**/security/*",
		"**/support/*",
		"**/dto/*",
		"**/controller/ControllerAdvice"
]


sonar {
	properties {
		property "sonar.projectKey", "Covigator_Covigator-BE"
		property "sonar.organization", "covigator"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.exclusions', '**/test/**, **/resources/**, **/*Application*, **/config/**, **/exception/**, **/dto/**, **/security/**, **/support/**, **/controller/ControllerAdvice'
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.java.coveragePlugin', 'jacoco'
		property 'sonar.coverage.jacoco.xmlReportPaths', jacocoDir.get().file("jacoco/index.xml").asFile
	}
}

jacoco {
	toolVersion = '0.8.12'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.hibernate.orm:hibernate-spatial:6.5.2.Final'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//jwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.12.5'

	//spring-doc
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

	//spring-security-crypto
	implementation 'org.springframework.security:spring-security-crypto'

	//slack api client
	implementation 'com.slack.api:slack-api-client:1.42.0'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	dependsOn test //테스트가 수행되어야만 report를 생성할 수 있도록 설정
	reports {
		html.required.set(true)
		xml.required.set(true)
		html.destination jacocoDir.get().file("jacoco/index.html").asFile
		xml.destination jacocoDir.get().file("jacoco/index.xml").asFile
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: jacocoExcludePatterns)
				})
		)
	}
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			//rule 활성화
			enabled = true

			//클래스 단위로 룰 체크
			element = 'CLASS'

			// rule 을 violate 해도 빌드 성공
			failOnViolation = false

			// 라인 커버리지를 최소 70% 만족
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.60
			}

			// 브랜치 커버리지를 최소 70% 만족
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.60
			}

			excludes = jacocoExcludePatterns
		}
	}
}